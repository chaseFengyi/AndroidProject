package com.mynutritionstreet.image;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;

/**
 * @author FengYi~
 *
 */
public class ScalePicture {

	/**
	 * 计算出合适的inSampleSize值
	 * @param options
	 * @param reqWidth  要压缩到的图片宽度
	 * @param reqHeight 想要的图片高度
	 * @return 
	 */
	public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth,int reqHeight){
		//原图片宽高
		final int height = options.outHeight;
		final int width = options.outWidth;
		int inSampleSize = 1;
		if(height > reqHeight || width > reqWidth){
			// 计算出实际宽高和目标宽高的比率  
	        final int heightRatio = Math.round((float) height / (float) reqHeight);  
	        final int widthRatio = Math.round((float) width / (float) reqWidth);  
	        // 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  
	        // 一定都会大于等于目标的宽和高。  
	        inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;  
		}
		return inSampleSize;  
	}
	
	/**
	 * 得到压缩后的图片
	 * @param imageUrl 
	 * @param reqWidth
	 * @param reqHeight
	 * @return
	 */
	public static Bitmap decodeSampledBitmapByResource(Resources res, int resId, int reqWidth, int reqHeight){
		// 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  
	    final BitmapFactory.Options options = new BitmapFactory.Options();  
	    options.inJustDecodeBounds = true;
	    BitmapFactory.decodeResource(res, resId, options); 
	    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
	    // 使用获取到的inSampleSize值再次解析图片  
	    options.inJustDecodeBounds = false;  
	    return BitmapFactory.decodeResource(res, resId, options); 
	}
	
	public static Bitmap decodeSampledBitmap(Bitmap imageUrl, int reqWidth, int reqHeight){
		// 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  
	    final BitmapFactory.Options options = new BitmapFactory.Options();  
	    options.inJustDecodeBounds = true;
	    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
		Matrix matrix = new Matrix();
		matrix.postScale(1/options.inSampleSize, 1/options.inSampleSize);
		return Bitmap.createBitmap(imageUrl, 0, 0, imageUrl.getWidth(), imageUrl.getHeight(), matrix, true);
	}
}
